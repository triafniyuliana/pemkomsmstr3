/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package frame;

import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author asus
 */
public class ListProduct extends javax.swing.JPanel {

    /**
     * Creates new form ListProduct
     */
    public ListProduct() {
        initComponents();
        getProduk("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        RefreshButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        TxtCari = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        DataProduk = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        RefreshButton.setText("Refresh");
        RefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshButtonActionPerformed(evt);
            }
        });

        jButton1.setText("Tambah");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        TxtCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                TxtCariKeyReleased(evt);
            }
        });

        jButton2.setText("Edit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Hapus");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(35, 35, 35)
                .addComponent(jButton2)
                .addGap(44, 44, 44)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addComponent(RefreshButton)
                .addGap(154, 154, 154)
                .addComponent(TxtCari, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RefreshButton)
                    .addComponent(jButton1)
                    .addComponent(TxtCari, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        DataProduk.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(DataProduk);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 775, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(jPanel2, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        DashboardAdmin DA = new DashboardAdmin();
        TambahProduct tambahProductForm = new TambahProduct(DA, true);
        tambahProductForm.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void RefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshButtonActionPerformed
        // TODO add your handling code here:
        getProduk("");
    }//GEN-LAST:event_RefreshButtonActionPerformed

    private void TxtCariKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtCariKeyReleased
        // TODO add your handling code here:
        String key = TxtCari.getText();
        String w = "WHERE nama_produk LIKE '%"+key+"%' ";
        getProduk(w);
    }//GEN-LAST:event_TxtCariKeyReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
         int n = DataProduk.getSelectedRow();
        if(n != -1){
            int id = Integer.parseInt(DataProduk.getValueAt(n, 0).toString());
            System.out.println(id);
            DashboardAdmin DA = new DashboardAdmin();
            EditProduct U = new EditProduct(DA, true);
            U.setId(id);
            U.loadData();
            U.setVisible(true); 
            System.out.println(U.getId());
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        try {
            int n = DataProduk.getSelectedRow();
        if(n != -1){
            int id = Integer.parseInt(DataProduk.getValueAt(n, 0).toString());
            System.out.println(id);
//            String fullname = DataProduk.getValueAt(n, 1).toString();
            
            
            int opsi = JOptionPane.showConfirmDialog(this, 
                    "Apakah Anda yakin ingin menghapus data ?", 
                    "Hapus Data", 
                    JOptionPane.YES_NO_OPTION);
            if(opsi == 0){
                String Q = "DELETE FROM produk "
                        + "WHERE id_produk ="+id;
                
                try {
                    Connection K = Koneksi.Go();
                    Statement S = K.createStatement();
                    S.executeUpdate(Q);
                    getProduk(""); 
                    JOptionPane.showMessageDialog(this, "Data telah terhapus");
                } catch (SQLException e) {
                }
            }
            
        }else {
            JOptionPane.showMessageDialog(this, "Anda belum memilih data");
        }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable DataProduk;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JTextField TxtCari;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public void getProduk(String Where) {
        DefaultTableModel model = new DefaultTableModel();
        for (int i = model.getRowCount() - 1; i >= 0; i--) {
            model.removeRow(i); 
        }
        model.addColumn("id_produk");
        model.addColumn("no");
        model.addColumn("nama");
        model.addColumn("Kode");
        model.addColumn("Deskripsi");
        model.addColumn("Kategori");
        model.addColumn("Harga Jual");
        model.addColumn("Harga Beli");
        model.addColumn("Stok");
        model.addColumn("Suplayer");
        
        DataProduk.setModel(model);

        try {
    // Membuat koneksi
        Connection conn = Koneksi.Go();

    // Membuat query dengan JOIN untuk mendapatkan nama kategori dan suplayer
        String query = "SELECT produk.id_produk, produk.nama_produk, produk.kode_produk, produk.deskripsi, " +
               "produk.harga_jual, produk.harga_beli, produk.stok, produk_kategori.nama AS kategori, " +
               "suplayer_produk.nama AS suplayer " +
               "FROM produk " +
               "JOIN produk_kategori ON produk.kategori = produk_kategori.id_kategori " +
               "JOIN suplayer_produk ON produk.suplayer = suplayer_produk.id_suplayer " +
               Where;  // Pastikan kondisi `Where` didefinisikan


        PreparedStatement stmt = conn.prepareStatement(query);
        ResultSet rs = stmt.executeQuery();
        int no = 0;

    // Mengambil data dari ResultSet dan menambahkannya ke JTable
        while (rs.next()) {
            int id = rs.getInt("id_produk");
            no++;
            String nama_produk = rs.getString("nama_produk");
            int kode_produk = rs.getInt("kode_produk");
            String deskripsi = rs.getString("deskripsi");
            String kategori = rs.getString("kategori"); // Nama kategori
            int harga_jual = rs.getInt("harga_jual");
            int harga_beli = rs.getInt("harga_beli");
            int stok = rs.getInt("stok");
            String suplayer = rs.getString("suplayer"); // Nama suplayer

            model.addRow(new Object[]{id, no, nama_produk, kode_produk, deskripsi, kategori, harga_jual, harga_beli, stok, suplayer});
        }
        DataProduk.getColumnModel().getColumn(0).setMinWidth(0);
        DataProduk.getColumnModel().getColumn(0).setMaxWidth(0);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Gagal mengambil data: " + e.getMessage());
        }

    }
}
